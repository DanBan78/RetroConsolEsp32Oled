#ifndef DINO_PRIVATE_LIB_H
#define DINO_PRIVATE_LIB_H

#include <cstdint>

  enum PteroState { PteroUp, PteroDown, PteroFall };
  #define TREE_NARROW false
  #define TREE_WIDE true

   struct pteroStruct {
    uint8_t x;
    uint8_t y;
    bool colission = false;
    PteroState state = PteroUp;
  };

   struct treeStruct {
    uint8_t x;
    bool type = TREE_NARROW;
  };

   struct treeTypeStruct {
    uint8_t xColisionRange;
    uint8_t yColisionRange;
    uint8_t width;
    uint8_t height;
  };

  const treeTypeStruct TreeParams[2]= {
    {2, 5, 11, 23}, // TREE_NARROW
    {4, 5, 22, 23}  // TREE_WIDE
  };

   struct GameConstStruct {
    uint8_t StartTreeX;
    uint8_t NewTreeXInit;
    uint8_t minDeltaTrees;
    uint8_t baselineY;
    uint8_t maxspeed;
    uint8_t tree_y; 
    uint8_t dino_foodInit;
    uint8_t dino_baseX;
    uint8_t dino_baseY;
    uint8_t dino_xColRange;
    uint8_t dino_width;
    uint8_t dino_height;
    uint8_t dino_jumpHeight;
    uint8_t ptero_width;
    uint8_t ptero_height;
    uint8_t ptero_initY;
  };

   struct dinoStruct {
    uint8_t  	y;
    bool state = true;
    bool colision = false;
    uint8_t 	food;
    uint8_t 	jump; // 0 - not jumping, 1 - going up, 2 - going down
  };

   struct dGameStruct {
    uint8_t  speed;
    uint8_t  score;
    uint8_t  sessionScore;
    bool	   pause;
  };

  void Game_Dino();
  bool CheckCollision(dGameStruct& DinoGame, dinoStruct& Dino, treeStruct& tree, const GameConstStruct& GameConst);
  void CalcGameSpeed(dGameStruct& DinoGame, const GameConstStruct& GameConst);
  void CalcPteroAnimations(dGameStruct& DinoGame, pteroStruct& Ptero, const GameConstStruct& GameConst);
  void CalcTreesAnimations (dGameStruct& DinoGame, treeStruct& tree1, treeStruct& tree2, const GameConstStruct& GameConst);
  void CheckPteroColision(dGameStruct& DinoGame, dinoStruct& Dino, pteroStruct& Ptero, const GameConstStruct& GameConst);
  void ColisionDetected(dinoStruct& Dino, const GameConstStruct& GameConst);
  void DinoGamePause();
  void DinoJump(dGameStruct& DinoGame, dinoStruct& Dino, const GameConstStruct& GameConst);
  void displayAuu(int y);
  void displaybutton(int value);
  void displayDemo();
  void DisplayGameFrame(dGameStruct& DinoGame, dinoStruct& Dino, pteroStruct& Ptero, treeStruct& tree1, treeStruct& tree2, const GameConstStruct& GameConst);
  void displayScore(dGameStruct& DinoGame, dinoStruct& Dino);
  void displayspeed(int value);
  void displaySummary(dGameStruct& DinoGame, dinoStruct& Dino);
  void ExtraSpeed(dGameStruct& DinoGame, int direction, uint8_t* sprite);
  void InitValues();
  void IntroMessage();
  void moveDino(dinoStruct& Dino, const GameConstStruct& GameConst);
  void movePtero(pteroStruct& Ptero, const GameConstStruct& GameConst);
  void moveTree(treeStruct& tree, const GameConstStruct& GameConst);
  void OutOfFood();
  void Play (dGameStruct& DinoGame, dinoStruct& Dino, pteroStruct& Ptero, treeStruct& tree1, treeStruct& tree2, const GameConstStruct& GameConst);
  void RenderScene(dGameStruct& DinoGame, dinoStruct& Dino, treeStruct& tree1, treeStruct& tree2, const GameConstStruct& GameConst);
  void ReplayInitValues(dGameStruct& DinoGame, dinoStruct& Dino, pteroStruct& Ptero, treeStruct& tree1, treeStruct& tree2, const GameConstStruct& GameConst);
  void resethighscore();
  void ShowScore(dGameStruct& DinoGame);

  extern const GameInfo GameInfo_Dino;

  // 'ptero1', 16x10px
  static const unsigned char PROGMEM ptero1[] = {
  0x01, 0x00, 0x01, 0x80, 0x01, 0xc0, 0x01, 0xc0, 0x19, 0xe0, 0x3d, 0xf0, 0x6d, 0xf8, 0xff, 0xff, 
  0x07, 0xfe, 0x01, 0xf8
  };
  static const unsigned char PROGMEM ptero2[] = {
  0x18, 0x00, 0x3c, 0x00, 0x6c, 0x01, 0xff, 0xff, 0x07, 0xfe, 0x00, 0xfc, 0x00, 0x7c, 0x00, 0x3c, 
  0x00, 0x1e, 0x00, 0x0c
  };
  // 'dino3', 10x16px
  static const unsigned char PROGMEM ptero3[] = {
  0x00, 0x00, 0x01, 0x00, 0x09, 0x80, 0x19, 0xc0, 0x1d, 0xc0, 0x1f, 0xc0, 0x0f, 0xc0, 0x07, 0xc0, 
  0x03, 0xc0, 0x01, 0x80, 0x07, 0x80, 0x0d, 0x00, 0x0f, 0x80, 0x07, 0xc0, 0x03, 0x40, 0x01, 0x40
  };

  static const unsigned char PROGMEM dino1[]={
  // 'dino', 25x26px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x06, 0xff, 0x00, 0x00, 0x0e, 0xff, 0x00, 
  0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0xc0, 0x00, 
  0x00, 0x0f, 0xfc, 0x00, 0x40, 0x0f, 0xc0, 0x00, 0x40, 0x1f, 0x80, 0x00, 0x40, 0x7f, 0x80, 0x00, 
  0x60, 0xff, 0xe0, 0x00, 0x71, 0xff, 0xa0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xff, 0x80, 0x00, 
  0x7f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 
  0x03, 0xfc, 0x00, 0x00, 0x01, 0xdc, 0x00, 0x00, 0x01, 0x8c, 0x00, 0x00, 0x03, 0x8c, 0x00, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00
  };

  static const unsigned char PROGMEM dino2[]= {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x06, 0xff, 0x00, 0x00, 0x0e, 0xff, 0x00, 
    0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0xc0, 0x00, 
    0x00, 0x0f, 0xfc, 0x00, 0x80, 0x0f, 0xc0, 0x00, 0x80, 0x1f, 0x80, 0x00, 0xc0, 0x7f, 0xa0, 0x00, 
    0xe0, 0xff, 0xe0, 0x00, 0x71, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xff, 0x80, 0x00, 
    0x7f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 
    0x03, 0xfc, 0x00, 0x00, 0x01, 0xdc, 0x00, 0x00, 0x01, 0x8e, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 
    0x01, 0x80, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00
  };

  static const unsigned char PROGMEM tree1[]={
    // 'tree1', 11x23px
    0x0e, 0x00, 0x1f, 0x00, 0x1f, 0x40, 0x1f, 0x60, 0x1f, 0x60, 0xdf, 0x60, 0xdf, 0x60, 0xdf, 0x60, 
    0xdf, 0xe0, 0xdf, 0xe0, 0xdf, 0xe0, 0xdf, 0xe0, 0xff, 0xc0, 0xff, 0x00, 0xff, 0x00, 0x7f, 0x00, 
    0x1f, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x0f, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x0e, 0x00
  };

  static const unsigned char PROGMEM tree2[]={
    // 'tree2', 22x23px
    0x0e, 0x00, 0xc0, 0x0f, 0x01, 0xe0, 0x0f, 0x41, 0xe8, 0x1f, 0x61, 0xec, 0x1f, 0x65, 0xec, 0x9f, 
    0x6d, 0xec, 0xdf, 0x6f, 0xec, 0xdf, 0xe7, 0xec, 0xdf, 0xf7, 0xec, 0xdf, 0xef, 0xec, 0xdf, 0xff, 
    0xfc, 0xdf, 0xef, 0xfc, 0xff, 0x83, 0xfc, 0xff, 0x03, 0xfc, 0xff, 0x03, 0xf8, 0x7f, 0x03, 0xe0, 
    0x1f, 0x03, 0xe0, 0x1f, 0x03, 0xe0, 0x1e, 0x03, 0xe0, 0x0e, 0x03, 0xe0, 0x0e, 0x01, 0xc0, 0x0e, 
    0x01, 0xc0, 0x0e, 0x01, 0xc0
  };
#endif
