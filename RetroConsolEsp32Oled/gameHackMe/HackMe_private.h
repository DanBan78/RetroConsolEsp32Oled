#ifndef HACKME_PRIVATE_H
#define HACKME_PRIVATE_H

  static const uint8_t ArrayMaxRowColIndex = 5;
  static const uint8_t timeForCodeBreaking = 25; // seconds for game
  static const uint8_t CodeWidth = 4;
  static const char* CodeString = "|CODE|";
  static const char CodeChars[12] = {'@','#','$','%','&','*','+','/','?','!','o', '\\'};

  typedef struct matchCodeStruct {
    uint8_t CodeSignsCodesIndex;
    bool matched;
  };

  typedef struct HackMeStruct {
    uint8_t SelectedRow = 0;
    uint8_t SelectedCol = 0;
    bool newGame = false;
    
    uint8_t CodeGenerated_xy[CodeWidth][2] = { { 1, 1 }, { 2, 2 }, { 3, 3 }, { 4, 4 }};//wspolrzedne w GameMatrix zawierajace wygenerowany kod
    uint8_t CodeSignsCodes[CodeWidth]; // tablica przechowujaca indeksy znakow kodu w kolejnosci wygenerowanej
    matchCodeStruct CodeSignsCodesMixed[CodeWidth]; // tablica przechowujaca indeksy znakow kodu w losowej kolejnosci
    uint8_t GameMatrix[6][6] = {
                              {0,1,2,3,4,5},
                              {6,7,8,9,0,1},
                              {2,3,4,5,6,7},
                              {8,9,0,1,2,3},
                              {4,5,6,7,8,9},
                              {0,1,2,3,4,5}};
  };


  // 'BOMB', 17x15px
const unsigned char BOMB [] PROGMEM = {
 	0x07, 0x80, 0x00, 0x1f, 0xe0, 0x00, 0x3f, 0xf0, 0x00, 0x7f, 0xf8, 0x00, 0x7f, 0xf8, 0x00, 0xff, 
	0xff, 0x80, 0xdf, 0xfe, 0x80, 0xdf, 0xfe, 0x80, 0xdf, 0xfe, 0x80, 0xdf, 0xff, 0x80, 0x6f, 0xf8, 
	0x00, 0x77, 0xf8, 0x00, 0x3b, 0xf0, 0x00, 0x1f, 0xe0, 0x00, 0x07, 0x80, 0x00
};
// 'wybuch', 64x64px
const unsigned char WYBUCH [] PROGMEM = {
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x80, 0x00, 0x0b, 0x00, 0x00, 0x38, 0x00, 0x00, 0xe0, 0x00, 0x19, 0x80, 0x00, 0xf8, 0x00, 
  0x00, 0x70, 0x00, 0x30, 0xc0, 0x07, 0x90, 0x00, 0x00, 0x7c, 0x00, 0x60, 0x60, 0x1c, 0x30, 0x00, 
  0x00, 0x26, 0x00, 0x40, 0x30, 0x70, 0x20, 0x00, 0x00, 0x33, 0x00, 0xc0, 0x19, 0xc0, 0x60, 0x00, 
  0x00, 0x11, 0xc1, 0x80, 0x0f, 0x00, 0x60, 0x00, 0x00, 0x10, 0x63, 0x00, 0x00, 0x00, 0x40, 0x00, 
  0x00, 0x18, 0x3e, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x80, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x39, 0xe3, 0x8e, 0x61, 0x9c, 0xe0, 0x00, 
  0x00, 0xe1, 0xf7, 0xdf, 0x73, 0x9c, 0x30, 0x00, 0x03, 0x81, 0xb6, 0xdb, 0x7f, 0x9c, 0x1c, 0x00, 
  0x0e, 0x01, 0xe6, 0xdb, 0x7f, 0x9c, 0x06, 0x00, 0x38, 0x01, 0xf6, 0xdb, 0x6d, 0x9c, 0x03, 0x80, 
  0x70, 0x01, 0xb6, 0xdb, 0x61, 0x80, 0x00, 0xc0, 0x3f, 0xc1, 0xf7, 0xdf, 0x61, 0x9c, 0x00, 0x60, 
  0x00, 0xe1, 0xe3, 0x8e, 0x61, 0x9c, 0x00, 0x70, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 
  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x02, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
  0x06, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x0f, 0xc6, 0x04, 0x00, 0x40, 0x00, 0x80, 0x00, 
  0x1e, 0x04, 0x0e, 0x00, 0xf0, 0x00, 0x80, 0x00, 0x30, 0x04, 0x1b, 0x00, 0x9c, 0x01, 0x80, 0x00, 
  0x00, 0x0c, 0x11, 0x01, 0x87, 0x01, 0x00, 0x00, 0x00, 0x08, 0x71, 0x81, 0x01, 0xc1, 0x00, 0x00, 
  0x00, 0x08, 0xc0, 0xc3, 0x00, 0x71, 0x00, 0x00, 0x00, 0x09, 0x80, 0x62, 0x00, 0x1e, 0x00, 0x00, 
  0x00, 0x0f, 0x00, 0x26, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x34, 0x01, 0xd0, 0x00, 0x00, 
  0x00, 0x1c, 0x00, 0x1c, 0x02, 0x38, 0x00, 0x00, 0x00, 0x18, 0x00, 0x08, 0x04, 0x71, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x04, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x42, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7e, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x19, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x33, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x37, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x33, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x19, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0e, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3f, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00
};
  //void checkfreemem();

  bool checkForTimeoutAndDisplayCurrTime(timerStruct& Timer1Sec);
  bool DigitIsWrong(HackMeStruct& Game);
  bool FirstDigitIsWrong(HackMeStruct& Game, timerStruct& Timer1Sec);
  bool FourthDigitIsWrong(HackMeStruct& Game, timerStruct& Timer1Sec);
  bool SecondDigitIsWrong(HackMeStruct& Game, timerStruct& Timer1Sec);
  bool ThirdDigitIsWrong(HackMeStruct& Game, timerStruct& Timer1Sec);
  void checkIfGameEndOrRestart(HackMeStruct& HackMeGame, timerStruct& Timer1Sec);
  void CodeResolved();
  void displayBombExplosion();
  void DisplayCode(HackMeStruct& Game, uint8_t ileZnakow);
  void displayMatrix(HackMeStruct& Game);
  void DisplayMixedCodeAndStartCountingDown(HackMeStruct& HackMeGame, timerStruct& Timer1Sec);
  void displayResolution(HackMeStruct& Game);
  void displaySound();
  void errorSound();
  void GameRestart(HackMeStruct& HackMeGame);
  void GenerateCode(HackMeStruct& Game, uint8_t ileZnakow);
  void GenerateRandomCodeMatrix(HackMeStruct& Game);
  void initGameParameters(HackMeStruct& HackMeGame, timerStruct& Timer1Sec);
  void mixCode(HackMeStruct& Game,uint8_t ileZnakow);
  void mixedCodeDisplay (HackMeStruct& Game);
  void randomMatrix(HackMeStruct& Game);
  void SelectCol_x(HackMeStruct& Game);
  void selectFirstRowCol(HackMeStruct& Game);
  void SelectRow_y(HackMeStruct& Game);
  void timeEndedGameOver(HackMeStruct& HackMeGame, timerStruct& Timer1Sec);
  void Timer_Interrupt(timerStruct& t);
  void WelcomeHackMeScreen();

#endif
